--	Balthisar Tidy Screenshot Generation Utility
--
--	This script uses Balthisar Tidy's AppleScript library and also
--	Mac OS X UI Scripting capabilities in order to quickly and efficiently
--	generate screenshots for the website, App Store, and help file.
--
-- To get the "sparkle" versions of the Preferences, build
-- the pro target with FEATURE_FAKE_SPARKLE defined in
-- PreferencesDefinitions.h
--
--	Created by: Jim Derry
--	Created on: 04/12/14 13:41:11
--
--	Copyright  2014 Jim Derry
--	All Rights Reserved
--


----------------------------------------------------------------
--	run
----------------------------------------------------------------
on run
	
	------------------------
	-- configure these
	------------------------
	set theBasePath to (POSIX path of (path to desktop))
	set imageoptions to {omitshadow:true, imagetype:"png"}
	
	set theMainWindowFilename to "tidy-main-window.png"
	set thePrefsWindowFilename to "tidy-prefs-0"
	set thePrefsFilenameSuffixNoSparkle to "-ns"
	
	
	
	------------------------
	-- Get Saving Path
	------------------------
	-- try
	-- set theBasePath to (POSIX path of (choose folder))
	-- end try
	
	
	
	-----------------------------
	-- Menus
	-----------------------------
	
	tell application "Balthisar Tidy for Work"
		
		activate
		
		tell application "System Events"
			keystroke "4" using {command down, shift down}
			keystroke " "
		end tell
		
		tell application "System Events"
			tell process "Balthisar Tidy for Work"
				tell menu bar 1
					tell menu bar item "Balthisar Tidy for Work"
						click
					end tell
				end tell
			end tell
		end tell
		
	end tell
	--do_menu("Balthisar Tidy for Work", "Balthisar Tidy for Work", "Quit Balthisar Tidy for Work")
	
	
	
end run


on do_menu(app_name, menu_name, menu_item)
	try
		-- bring the target application to the front
		tell application app_name
			activate
		end tell
		tell application "System Events"
			tell process app_name
				tell menu bar 1
					tell menu bar item menu_name
						tell menu menu_name
							click menu item menu_item
						end tell
					end tell
				end tell
			end tell
		end tell
		return true
	on error error_message
		return false
	end try
end do_menu

on do_submenu(app_name, menu_name, menu_item, submenu_item)
	try
		-- bring the target application to the front
		tell application app_name
			activate
		end tell
		tell application "System Events"
			tell process app_name
				tell menu bar 1
					tell menu bar item menu_name
						tell menu menu_name
							tell menu item menu_item
								tell menu menu_item
									click menu item submenu_item
								end tell
							end tell
						end tell
					end tell
				end tell
			end tell
		end tell
		return true
	on error error_message
		return false
	end try
end do_submenu



----------------------------------------------------------------
--	set_document_window_size
--		Sets an app's document window to the specified
--		width and height
-- @returns windowId as text
----------------------------------------------------------------
on set_document_window_size(winWidth, winHeight)
	
	---------------------------------------------------------
	-- Declare locals so we can see them in debugger.
	---------------------------------------------------------
	local screenWidth, screenHeight, yAxis, xAxis
	local scriptPath, theSampleFile
	local theOpenDocument
	
	---------------------------------------------------------
	-- Windows and screen size math
	---------------------------------------------------------
	set screenWidth to item 3 of screen_bounds()
	set screenHeight to item 4 of screen_bounds()
	set yAxis to (screenHeight - winHeight) / 2 as integer
	set xAxis to (screenWidth - winWidth) / 2 as integer
	
	---------------------------------------------------------
	-- Find out where our testing document is
	---------------------------------------------------------
	tell application "Finder"
		set scriptPath to (container of file (path to me)) as string
		set theSampleFile to (scriptPath & "Sample Dirty Document.html") as string
	end tell
	
	tell application "Balthisar Tidy for Work"
		set theOpenDocument to (open theSampleFile)
		set the bounds of the first window to {xAxis, yAxis, winWidth + xAxis, winHeight + yAxis}
		return id of window 1
	end tell
	
end set_document_window_size


----------------------------------------------------------------
--	take_screenshot_window
-- 		Saves an app's window to a Posix path. The
--		options is a record:
--			imagetype: string png, jpg, etc.
--			omitshadow: boolean
----------------------------------------------------------------
on take_screenshot_window(the_window_id, a_file_path, options)
	
	---------------------------------------------------------
	-- Declare locals so we can see them in debugger.
	---------------------------------------------------------
	local shell_command
	
	---------------------------------------------------------
	-- Build the string we will pass to bash
	---------------------------------------------------------
	set shell_command to "screencapture -l" & the_window_id
	
	if (omitshadow of (options & {omitshadow:true})) then
		set shell_command to shell_command & " -o"
	end if
	
	set shell_command to shell_command & " -t" & imagetype of (options & {imagetype:"png"})
	
	set shell_command to shell_command & " " & (quoted form of a_file_path)
	
	---------------------------------------------------------
	-- Pop it to the front and execute the command.
	---------------------------------------------------------
	tell application "System Events" to set frontmost of process "Balthisar Tidy for Work" to true
	delay 1
	do shell script shell_command
	
end take_screenshot_window


----------------------------------------------------------------
--	screen_bounds
--		Convenience to fetch the main screen dimensions.
----------------------------------------------------------------
on screen_bounds()
	tell application "Finder"
		return bounds of window of desktop
	end tell
end screen_bounds

